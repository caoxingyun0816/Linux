9.24
app_id, app_key, app_secret , 对于平台来说, 需要给你的 你的开发者账号分配对应的权限:
1. app_id 是用来标记你的开发者账号的, 是你的用户id, 这个id 在数据库添加检索, 方便快速查找
2 app_key 和 app_secret 是一对出现的账号, 同一个 app_id 可以对应多个 app_key+app_secret, 这样 平台就可以分配你不一样的权限, 比如 app_key1 + app_secect1 只有只读权限 但是 app_key2+app_secret2 有读写权限.. 这样你就可以把对应的权限 放给不同的开发者. 其中权限的配置都是直接跟app_key 做关联的, app_key 也需要添加数据库检索, 方便快速查找
3 至于为什么 要有app_key + app_secret 这种成对出现的机制呢, 因为 要加密, 通常 在首次验证(类似登录场景) , 你需要用 app_key(标记要申请的权限有哪些) + app_secret(密码, 表示你真的拥有这个权限) 来申请一个token, 就是我们经常用到的 access_token, 之后的数据请求, 就直接提供access_token 就可以验证权限了.

上述3点说的有点多哈, 不知道讲明白了没, 顺便再说一下简化的场景:
1 省去 app_id, 他默认每一个用户有且仅有一套权限配置, 所以直接将 app_id = app_key , 然后外加一个app_secret就够了. 
2 省去app_id 和 app_key, 相当于 app_id = app_key = app_secret, 通常用于开放性接口的地方, 特别是很多地图类api 都采用这种模式, 这种模式下, 带上app_id 的目的仅仅是统计 某一个用户调用接口的次数而已了. 


AppID：应用的唯一标识AppKey：公匙（相当于账号）AppSecret：私匙（相当于密码）

token：令牌（过期失效）


使用方法

1. 向第三方服务器请求授权时，带上AppKey和AppSecret（需存在服务器端）

2. 第三方服务器验证AppKey和AppSecret在DB中有无记录

3. 如果有，生成一串唯一的字符串（token令牌），返回给服务器，服务器再返回给客户端

4. 客户端下次请求敏感数据时带上令牌

一次接口调用的签名值，服务器端 “防止 伪装请求/防篡改/ 防重发” 识别的重要依据。
双方约定一个密钥和一个加密算法来生成sign，接口提供方根据密钥和解密算法来解析数据，如果没有问题，则调用接口成功。

服务端如何统一解析sign。
拿到传递的参数，用同样的规则进行加密，然后比较两个sign是否一致，相同才能调用。

根据参数自动分发接口。

总结：
接口调用方和接口提供方约定好统一的参数加密算法
接口调用方在调用时把加密后的_sign放在参数中去请求接口
接口提供方接到响应后，判断时间戳是不是在有效时间内（这个时间间隔根据你的安全范围可以是10分钟，5分钟，20秒等，过期失效，前提是需要保证接口提供方和调用方的服务器时间为准确的网络同步时间）
服务端把参数中除了_sign以外的参数进行加密，然后把加密结果和传过来的_sign比较，相同则执行调用请求。

api安全
接口参数 加密 私钥 数据库保存钥匙 时效性校验

遇到问题赶紧查查查学学学
tomacat 连接数 超时问题
采购新增两个  采购用途 字段

超时时间设置的多久呢

线程数设置太少，大量请求时，会导致接下来的连接连不上，如果连接超时时间设置太长(如10s)，就会等待10s才会释放连接。导致资源不够。

线程太少，队列排队，等待10s，还没有连接释放。所以就超时了。
可以增加超时时间或者每次请求前先sleep一下。



多线程

9.25
超时Tomcat
connection out
connectionTimeout 超时时间设置
在接受连接之后等待的请求URI的毫秒数。

问题现象
在某个时刻，后端收到了平时4-6倍的请求（保密起见，略去产品和事件），在10分钟后居然没有请求可以接进来

问题原因
经过分析，首先，是后端服务器的线程池满了，线程池满的原因：
1.server.xml中maxThread=512,导致超过512的之后的请求只能排队，等待有线程释放后，才能被处理；
2.connectionTimeout配置为10000，这个配置导致建立一个socket连接后，如果一直没有收到客户端的FIN，也没有数据过来，那么此连接也必须等到10s后(指的是连接一个url的连接等待时间。)，才能被超时释放，巧了，现网的客户端真的不会发FIN包过来，那一直陪它耗够10秒,和1一起，处理的512个线程只能等待10s后，超时释放才能处理后面排队的请求，所以浪涌一来，分分钟就满了，特慢
soTimeout
指的是连接上一个url，获取response的返回等待时间


接下来是怎么接不进来的呢？
部分用户忍不了了，发了个登出请求，依然在特慢的排队，部分进入了队列的客户端加上前面时间一共等了几秒都没响应，客户端就发了个FIN过来，说要不咱主动断开算了，后端收到请求变为CLOSE_WAIT状态，说你等我会，处理点事，巧了，用户这几秒也受不了了，整个重启客户端，客户端ip再来就变了，结果后端处理好后的第三次握手本该通知"我处理好了，你断吧"的请求发不过去，好死不死，后台还配的重发15次，重发15次需要大概20~30分钟左右，啊哦，于是这条请求一直占着线程20多分钟，这样的请求多点，线程就一直占着，于是别的请求就一直就接不进来咯

问题解决
1.修改maxThread=1024，提高一倍的线程数

2.修改connectionTimeout=2000，没数据了之后2秒就断，别等这么久（keepAlivetimeout是请求处理完了之后等多久关闭连接，connectionTimeout是本条连接等多久没数据关连接）

3.修改/proc/sys/net/ipv4/目录下的tcp_retries2文件为4，别重发15次了，一般也用不了这么多


连接超时时间
springcloud 服务间处理时间限制，超过多少秒断开
HttpClient连接时间

所谓连接的时候

是HttpClient发送请求的地方开始到连接上目标url主机地址的时间，

理论上是距离越短越快，线路越通畅越快，但是由于路由复杂交错，往往连接上的时间都不固定，运气不好连不上，

HttpClient的默认连接时间，默认可能是1分钟，假如超过1分钟 过一会继续尝试连接，这样会有一个问题 假如遇到一个url老是连不上，会影响其他线程的线程进去，

所以我们有必要进行特殊设置，比如设置10秒钟 假如10秒钟没有连接上 我们就报错，这样我们就可以进行业务上的处理，

比如我们业务上控制 过会再连接试试看。并且这个特殊url写到log4j日志里去。方便管理员查看。

 

HttpClient读取时间

所谓读取的时间 是HttpClient已经连接到了目标服务器，然后进行内容数据的获取，一般情况 读取数据都是很快速的，

但是假如读取的数据量大，或者是目标服务器本身的问题（比如读取数据库慢，并发量大等...）也会影响读取时间。

我们还是需要来特殊设置下，比如设置10秒钟 假如10秒钟还没读取完，就报错，同上，我们可以业务上处理。


由于需要在Linux上进行项目的测试，将项目放在Linux服务上，通过地址和端口号进行连接，但会出现java.net.ConnectException: Connection timed out: connect 的错误。
尝试解决办法：
Linux和Windows互ping一下。尝试能不能通，检查一下URL的地址是否正确
检查Linux项目是否启动，端口号是否正确；ps aux | grep java (查看进程)  netstat -tlnp|grep 端口号(查看端口占用情况）
如果还是不可以，可以在项目的webapp下放置一个页面。Windows尝试是否可以访问。如果不能访问，就证明是Linux防火墙的原因，（表示就卡在这一步）
解决：
修改Linux防火墙：
cd /etc/sysconfig
vi iptables
添加 -A INPUT -m state --state NEW -m tcp --dport 项目端口号（或者80） -j ACCEPT
        格式参考：-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT
重启防火墙     service iptables restart 
尝试是否OK
